<?xml version="1.0" ?>
<launch>
    <arg name="robot_ip" default="172.16.0.2" />
    <arg name="load_gripper" default="false" />
    <arg name="sim" default="true" />
    <param name="sim" value="$(arg sim)" />
    <arg name="gazebo_plugin" default="panda_mpc" /> <!-- set to gazebo_ros_control if robot cannot load in rviz -->
    <rosparam command="load" file = "$(find panda_mpc)/config/param.yaml"/>

    <node name="tf_camera_robot" pkg="panda_mpc" type="tf_broadcast"/>


    <!-- Include Gazebo parameters (these are arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="false"/>
    <arg name="robot_ns" default="/"/>

    <group unless="$(arg sim)">
        <include file="$(find franka_control)/launch/franka_control.launch">
            <arg name="robot_ip" value ="$(arg robot_ip)"/>
            <arg name="load_gripper" value="$(arg load_gripper)" />
        </include>        <!--node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_velocity_example_controller" /-->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="panda_mpc" />

    </group>


    <!-- Include for visualizing in RVIZ -->


    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find panda_mpc)/launch/robot.rviz"/>

    <group if="$(arg sim)">

        <node name="killgazebo" pkg="panda_mpc" type="killgazebo" output="screen" />
        <!-- Load the URDF into the ROS parameter Server -->
        <param name="robot_description" command="
                     $(find xacro)/xacro '$(find franka_description_gazebo)/robots/panda_arm.urdf.xacro' gazebo_plugin:=$(arg gazebo_plugin)"/>

        <!--remap from="/panda_mpc/joint_states" to="/joint_states"/-->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
            <remap from="/joint_states" to="/panda_mpc/joint_states"/> <!-- be careful about the joint's name: rviz for robot_model use /joint_states, bout in panda_simulation the node publish /panda_mpc/joint_states -->
            <rosparam param="publish_frequency">100</rosparam>
        </node>

        <rosparam param="init_joint_positions">
            panda_joint4: -1.57
            panda_joint6: 1.57
        </rosparam>

        <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched-->
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" value="$(find franka_description_gazebo)/worlds/panda_world.world"/>
            <arg name="gui" value="$(arg gui)"/>
            <arg name="paused" value="$(arg paused)"/>
            <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        </include>


        <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" output="screen"
                    args="-param robot_description
                    -urdf
                    -model panda"/>

        </group>
    <!--node pkg="joint_state_publisher" type="joint_state_publisher" output="screen" name="joint_state_publisher">
                <param name="publish_default_velocities" value="false"/>
        <param name="publish_default_efforts" value="false"/>
        <param name="rate" value="100"/>

    </node-->

    <!-- Load joint controller configurations from YAML file to parameters server -->
    <!--rosparam file="$(find panda_mpc)/config/panda_mpc.yaml" command="load"/-->

    <!-- load the controllers -->
    <!--node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
          output="screen" ns="/panda" args="joint_state_controller
                                      panda_joint1_position_controller
                                      panda_joint2_position_controller
                                      panda_joint3_position_controller
                                      panda_joint4_position_controller
                                      panda_joint5_position_controller
                                      panda_joint6_position_controller
                                      panda_joint7_position_controller"/-->


</launch>
