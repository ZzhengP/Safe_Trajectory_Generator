// Generated by gencpp from file panda_mpc/PandaRunMsg.msg
// DO NOT EDIT!


#ifndef PANDA_MPC_MESSAGE_PANDARUNMSG_H
#define PANDA_MPC_MESSAGE_PANDARUNMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>
#include <sensor_msgs/JointState.h>

namespace panda_mpc
{
template <class ContainerAllocator>
struct PandaRunMsg_
{
  typedef PandaRunMsg_<ContainerAllocator> Type;

  PandaRunMsg_()
    : header()
    , vmax_ec(0.0)
    , t_traj_curr(0.0)
    , Xd_traj()
    , Xdd_traj()
    , X_err()
    , Xd_control()
    , qd_des()
    , play_traj_(false)
    , positioning_(false)
    , tune_gains_(false)
    , distance_to_contact_(0.0)  {
    }
  PandaRunMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vmax_ec(0.0)
    , t_traj_curr(0.0)
    , Xd_traj(_alloc)
    , Xdd_traj(_alloc)
    , X_err(_alloc)
    , Xd_control(_alloc)
    , qd_des(_alloc)
    , play_traj_(false)
    , positioning_(false)
    , tune_gains_(false)
    , distance_to_contact_(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _vmax_ec_type;
  _vmax_ec_type vmax_ec;

   typedef double _t_traj_curr_type;
  _t_traj_curr_type t_traj_curr;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _Xd_traj_type;
  _Xd_traj_type Xd_traj;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _Xdd_traj_type;
  _Xdd_traj_type Xdd_traj;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _X_err_type;
  _X_err_type X_err;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _Xd_control_type;
  _Xd_control_type Xd_control;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _qd_des_type;
  _qd_des_type qd_des;

   typedef uint8_t _play_traj__type;
  _play_traj__type play_traj_;

   typedef uint8_t _positioning__type;
  _positioning__type positioning_;

   typedef uint8_t _tune_gains__type;
  _tune_gains__type tune_gains_;

   typedef double _distance_to_contact__type;
  _distance_to_contact__type distance_to_contact_;





  typedef boost::shared_ptr< ::panda_mpc::PandaRunMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panda_mpc::PandaRunMsg_<ContainerAllocator> const> ConstPtr;

}; // struct PandaRunMsg_

typedef ::panda_mpc::PandaRunMsg_<std::allocator<void> > PandaRunMsg;

typedef boost::shared_ptr< ::panda_mpc::PandaRunMsg > PandaRunMsgPtr;
typedef boost::shared_ptr< ::panda_mpc::PandaRunMsg const> PandaRunMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panda_mpc::PandaRunMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panda_mpc::PandaRunMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panda_mpc::PandaRunMsg_<ContainerAllocator1> & lhs, const ::panda_mpc::PandaRunMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.vmax_ec == rhs.vmax_ec &&
    lhs.t_traj_curr == rhs.t_traj_curr &&
    lhs.Xd_traj == rhs.Xd_traj &&
    lhs.Xdd_traj == rhs.Xdd_traj &&
    lhs.X_err == rhs.X_err &&
    lhs.Xd_control == rhs.Xd_control &&
    lhs.qd_des == rhs.qd_des &&
    lhs.play_traj_ == rhs.play_traj_ &&
    lhs.positioning_ == rhs.positioning_ &&
    lhs.tune_gains_ == rhs.tune_gains_ &&
    lhs.distance_to_contact_ == rhs.distance_to_contact_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panda_mpc::PandaRunMsg_<ContainerAllocator1> & lhs, const ::panda_mpc::PandaRunMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panda_mpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::panda_mpc::PandaRunMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_mpc::PandaRunMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_mpc::PandaRunMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_mpc::PandaRunMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_mpc::PandaRunMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_mpc::PandaRunMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panda_mpc::PandaRunMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "978d838c2f0b7635c26f79d5649e9439";
  }

  static const char* value(const ::panda_mpc::PandaRunMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x978d838c2f0b7635ULL;
  static const uint64_t static_value2 = 0xc26f79d5649e9439ULL;
};

template<class ContainerAllocator>
struct DataType< ::panda_mpc::PandaRunMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panda_mpc/PandaRunMsg";
  }

  static const char* value(const ::panda_mpc::PandaRunMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panda_mpc::PandaRunMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 vmax_ec # [m/s]\n"
"float64 t_traj_curr\n"
"geometry_msgs/Twist Xd_traj\n"
"geometry_msgs/Twist Xdd_traj\n"
"geometry_msgs/Twist X_err\n"
"geometry_msgs/Twist Xd_control\n"
"sensor_msgs/JointState qd_des\n"
"bool play_traj_\n"
"bool positioning_\n"
"bool tune_gains_\n"
"float64 distance_to_contact_\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: sensor_msgs/JointState\n"
"# This is a message that holds data to describe the state of a set of torque controlled joints. \n"
"#\n"
"# The state of each joint (revolute or prismatic) is defined by:\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s) and \n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"# The header specifies the time at which the joint states were recorded. All the joint states\n"
"# in one message have to be recorded at the same time.\n"
"#\n"
"# This message consists of a multiple arrays, one for each part of the joint state. \n"
"# The goal is to make each of the fields optional. When e.g. your joints have no\n"
"# effort associated with them, you can leave the effort array empty. \n"
"#\n"
"# All arrays in this message should have the same size, or be empty.\n"
"# This is the only way to uniquely associate the joint name with the correct\n"
"# states.\n"
"\n"
"\n"
"Header header\n"
"\n"
"string[] name\n"
"float64[] position\n"
"float64[] velocity\n"
"float64[] effort\n"
;
  }

  static const char* value(const ::panda_mpc::PandaRunMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panda_mpc::PandaRunMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vmax_ec);
      stream.next(m.t_traj_curr);
      stream.next(m.Xd_traj);
      stream.next(m.Xdd_traj);
      stream.next(m.X_err);
      stream.next(m.Xd_control);
      stream.next(m.qd_des);
      stream.next(m.play_traj_);
      stream.next(m.positioning_);
      stream.next(m.tune_gains_);
      stream.next(m.distance_to_contact_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PandaRunMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panda_mpc::PandaRunMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panda_mpc::PandaRunMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vmax_ec: ";
    Printer<double>::stream(s, indent + "  ", v.vmax_ec);
    s << indent << "t_traj_curr: ";
    Printer<double>::stream(s, indent + "  ", v.t_traj_curr);
    s << indent << "Xd_traj: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.Xd_traj);
    s << indent << "Xdd_traj: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.Xdd_traj);
    s << indent << "X_err: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.X_err);
    s << indent << "Xd_control: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.Xd_control);
    s << indent << "qd_des: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.qd_des);
    s << indent << "play_traj_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.play_traj_);
    s << indent << "positioning_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.positioning_);
    s << indent << "tune_gains_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tune_gains_);
    s << indent << "distance_to_contact_: ";
    Printer<double>::stream(s, indent + "  ", v.distance_to_contact_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANDA_MPC_MESSAGE_PANDARUNMSG_H
