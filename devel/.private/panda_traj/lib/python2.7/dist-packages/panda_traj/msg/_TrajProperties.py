# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from panda_traj/TrajProperties.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class TrajProperties(genpy.Message):
  _md5sum = "8fb34236d88ea1e31629703f4e635b92"
  _type = "panda_traj/TrajProperties"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool play_traj_
bool jogging_
bool gain_tunning_
bool move_
int64 index_
float64 amplitude
geometry_msgs/Pose X_curr_
geometry_msgs/Pose X_des_jog_
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['play_traj_','jogging_','gain_tunning_','move_','index_','amplitude','X_curr_','X_des_jog_']
  _slot_types = ['bool','bool','bool','bool','int64','float64','geometry_msgs/Pose','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       play_traj_,jogging_,gain_tunning_,move_,index_,amplitude,X_curr_,X_des_jog_

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajProperties, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.play_traj_ is None:
        self.play_traj_ = False
      if self.jogging_ is None:
        self.jogging_ = False
      if self.gain_tunning_ is None:
        self.gain_tunning_ = False
      if self.move_ is None:
        self.move_ = False
      if self.index_ is None:
        self.index_ = 0
      if self.amplitude is None:
        self.amplitude = 0.
      if self.X_curr_ is None:
        self.X_curr_ = geometry_msgs.msg.Pose()
      if self.X_des_jog_ is None:
        self.X_des_jog_ = geometry_msgs.msg.Pose()
    else:
      self.play_traj_ = False
      self.jogging_ = False
      self.gain_tunning_ = False
      self.move_ = False
      self.index_ = 0
      self.amplitude = 0.
      self.X_curr_ = geometry_msgs.msg.Pose()
      self.X_des_jog_ = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4Bq15d().pack(_x.play_traj_, _x.jogging_, _x.gain_tunning_, _x.move_, _x.index_, _x.amplitude, _x.X_curr_.position.x, _x.X_curr_.position.y, _x.X_curr_.position.z, _x.X_curr_.orientation.x, _x.X_curr_.orientation.y, _x.X_curr_.orientation.z, _x.X_curr_.orientation.w, _x.X_des_jog_.position.x, _x.X_des_jog_.position.y, _x.X_des_jog_.position.z, _x.X_des_jog_.orientation.x, _x.X_des_jog_.orientation.y, _x.X_des_jog_.orientation.z, _x.X_des_jog_.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.X_curr_ is None:
        self.X_curr_ = geometry_msgs.msg.Pose()
      if self.X_des_jog_ is None:
        self.X_des_jog_ = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 132
      (_x.play_traj_, _x.jogging_, _x.gain_tunning_, _x.move_, _x.index_, _x.amplitude, _x.X_curr_.position.x, _x.X_curr_.position.y, _x.X_curr_.position.z, _x.X_curr_.orientation.x, _x.X_curr_.orientation.y, _x.X_curr_.orientation.z, _x.X_curr_.orientation.w, _x.X_des_jog_.position.x, _x.X_des_jog_.position.y, _x.X_des_jog_.position.z, _x.X_des_jog_.orientation.x, _x.X_des_jog_.orientation.y, _x.X_des_jog_.orientation.z, _x.X_des_jog_.orientation.w,) = _get_struct_4Bq15d().unpack(str[start:end])
      self.play_traj_ = bool(self.play_traj_)
      self.jogging_ = bool(self.jogging_)
      self.gain_tunning_ = bool(self.gain_tunning_)
      self.move_ = bool(self.move_)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4Bq15d().pack(_x.play_traj_, _x.jogging_, _x.gain_tunning_, _x.move_, _x.index_, _x.amplitude, _x.X_curr_.position.x, _x.X_curr_.position.y, _x.X_curr_.position.z, _x.X_curr_.orientation.x, _x.X_curr_.orientation.y, _x.X_curr_.orientation.z, _x.X_curr_.orientation.w, _x.X_des_jog_.position.x, _x.X_des_jog_.position.y, _x.X_des_jog_.position.z, _x.X_des_jog_.orientation.x, _x.X_des_jog_.orientation.y, _x.X_des_jog_.orientation.z, _x.X_des_jog_.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.X_curr_ is None:
        self.X_curr_ = geometry_msgs.msg.Pose()
      if self.X_des_jog_ is None:
        self.X_des_jog_ = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 132
      (_x.play_traj_, _x.jogging_, _x.gain_tunning_, _x.move_, _x.index_, _x.amplitude, _x.X_curr_.position.x, _x.X_curr_.position.y, _x.X_curr_.position.z, _x.X_curr_.orientation.x, _x.X_curr_.orientation.y, _x.X_curr_.orientation.z, _x.X_curr_.orientation.w, _x.X_des_jog_.position.x, _x.X_des_jog_.position.y, _x.X_des_jog_.position.z, _x.X_des_jog_.orientation.x, _x.X_des_jog_.orientation.y, _x.X_des_jog_.orientation.z, _x.X_des_jog_.orientation.w,) = _get_struct_4Bq15d().unpack(str[start:end])
      self.play_traj_ = bool(self.play_traj_)
      self.jogging_ = bool(self.jogging_)
      self.gain_tunning_ = bool(self.gain_tunning_)
      self.move_ = bool(self.move_)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4Bq15d = None
def _get_struct_4Bq15d():
    global _struct_4Bq15d
    if _struct_4Bq15d is None:
        _struct_4Bq15d = struct.Struct("<4Bq15d")
    return _struct_4Bq15d
