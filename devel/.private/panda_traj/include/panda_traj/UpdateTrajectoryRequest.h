// Generated by gencpp from file panda_traj/UpdateTrajectoryRequest.msg
// DO NOT EDIT!


#ifndef PANDA_TRAJ_MESSAGE_UPDATETRAJECTORYREQUEST_H
#define PANDA_TRAJ_MESSAGE_UPDATETRAJECTORYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace panda_traj
{
template <class ContainerAllocator>
struct UpdateTrajectoryRequest_
{
  typedef UpdateTrajectoryRequest_<ContainerAllocator> Type;

  UpdateTrajectoryRequest_()
    : csv_traj_path()
    , verbose(false)  {
    }
  UpdateTrajectoryRequest_(const ContainerAllocator& _alloc)
    : csv_traj_path(_alloc)
    , verbose(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _csv_traj_path_type;
  _csv_traj_path_type csv_traj_path;

   typedef uint8_t _verbose_type;
  _verbose_type verbose;





  typedef boost::shared_ptr< ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UpdateTrajectoryRequest_

typedef ::panda_traj::UpdateTrajectoryRequest_<std::allocator<void> > UpdateTrajectoryRequest;

typedef boost::shared_ptr< ::panda_traj::UpdateTrajectoryRequest > UpdateTrajectoryRequestPtr;
typedef boost::shared_ptr< ::panda_traj::UpdateTrajectoryRequest const> UpdateTrajectoryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator1> & lhs, const ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.csv_traj_path == rhs.csv_traj_path &&
    lhs.verbose == rhs.verbose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator1> & lhs, const ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panda_traj

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c6853df9f42572d60890fd8fa81729a5";
  }

  static const char* value(const ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc6853df9f42572d6ULL;
  static const uint64_t static_value2 = 0x0890fd8fa81729a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panda_traj/UpdateTrajectoryRequest";
  }

  static const char* value(const ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string csv_traj_path\n"
"bool verbose\n"
;
  }

  static const char* value(const ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.csv_traj_path);
      stream.next(m.verbose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UpdateTrajectoryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panda_traj::UpdateTrajectoryRequest_<ContainerAllocator>& v)
  {
    s << indent << "csv_traj_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.csv_traj_path);
    s << indent << "verbose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.verbose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANDA_TRAJ_MESSAGE_UPDATETRAJECTORYREQUEST_H
